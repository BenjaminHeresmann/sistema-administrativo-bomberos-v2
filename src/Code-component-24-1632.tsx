/*
 * SCRIPT DE VERIFICACI√ìN R√ÅPIDA - SISTEMA BOMBEROS
 * ===============================================
 * 
 * Ejecutar en la consola del navegador para verificar
 * que todos los componentes est√©n funcionando correctamente
 */

console.log('üöí VERIFICACI√ìN DEL SISTEMA BOMBEROS');
console.log('=====================================');

// Verificar localStorage
function verificarLocalStorage() {
  try {
    localStorage.setItem('test_bomberos', 'ok');
    const valor = localStorage.getItem('test_bomberos');
    localStorage.removeItem('test_bomberos');
    
    if (valor === 'ok') {
      console.log('‚úÖ LocalStorage: Funcionando correctamente');
      return true;
    } else {
      console.log('‚ùå LocalStorage: Error en lectura/escritura');
      return false;
    }
  } catch (error) {
    console.log('‚ùå LocalStorage: No disponible -', error.message);
    return false;
  }
}

// Verificar sistema de autenticaci√≥n
function verificarAutenticacion() {
  console.log('\nüîê VERIFICANDO SISTEMA DE AUTENTICACI√ìN');
  console.log('---------------------------------------');
  
  // Usuarios de prueba
  const usuarios = [
    { email: 'admin@bomberos.cl', rol: 'Administrador' },
    { email: 'director@bomberos.cl', rol: 'Director' },
    { email: 'juan.perez@gmail.com', rol: 'Bombero Activo' }
  ];
  
  usuarios.forEach(user => {
    console.log(`üë§ ${user.email} (${user.rol}): Disponible para testing`);
  });
  
  console.log('üîë Contrase√±a para todos: 123456');
}

// Verificar navegaci√≥n
function verificarNavegacion() {
  console.log('\nüß≠ VERIFICANDO NAVEGACI√ìN');
  console.log('------------------------');
  
  if (window.history && window.history.pushState) {
    console.log('‚úÖ HTML5 History API: Soportada');
  } else {
    console.log('‚ùå HTML5 History API: No soportada');
  }
  
  if (window.location) {
    console.log(`‚úÖ URL actual: ${window.location.href}`);
  }
  
  // Verificar React Router
  if (window.React && window.ReactRouter) {
    console.log('‚úÖ React Router: Cargado');
  } else {
    console.log('‚ö†Ô∏è React Router: No detectado (normal si no est√° en producci√≥n)');
  }
}

// Verificar permisos del sistema
function verificarPermisos() {
  console.log('\nüõ°Ô∏è VERIFICANDO SISTEMA DE PERMISOS');
  console.log('----------------------------------');
  
  const rolesEsperados = [
    'Administrador',
    'Director', 
    'Capit√°n',
    'Primer Teniente',
    'Segundo Teniente',
    'Tesorero',
    'Secretario',
    'Ayudante',
    'Consejero de Disciplina 1',
    'Consejero de Disciplina 2',
    'Consejero de Disciplina 3',
    'Consejero de Disciplina 4',
    'Consejero de Disciplina 5',
    'Consejero de Disciplina 6',
    'Consejero de Disciplina 7',
    'Consejero de Disciplina 8',
    'Bombero Activo',
    'Bombero Honorario'
  ];
  
  console.log(`‚úÖ Roles configurados: ${rolesEsperados.length}`);
  console.log('üìã Roles disponibles:', rolesEsperados.slice(0, 5).join(', '), '... y m√°s');
}

// Verificar m√≥dulos del sistema
function verificarModulos() {
  console.log('\nüìö VERIFICANDO M√ìDULOS DEL SISTEMA');
  console.log('---------------------------------');
  
  const modulos = [
    'Dashboard',
    'Personal', 
    'Citaciones',
    'Videos Institucionales',
    'M√°quinas',
    'Administraci√≥n',
    'Permisos',
    'Mi Perfil',
    'Reportes'
  ];
  
  modulos.forEach(modulo => {
    console.log(`üìå ${modulo}: Configurado`);
  });
}

// Verificar compatibilidad del navegador
function verificarCompatibilidad() {
  console.log('\nüåê VERIFICANDO COMPATIBILIDAD DEL NAVEGADOR');
  console.log('------------------------------------------');
  
  const caracteristicas = {
    'localStorage': typeof Storage !== 'undefined',
    'sessionStorage': typeof sessionStorage !== 'undefined',
    'fetch': typeof fetch !== 'undefined',
    'Promise': typeof Promise !== 'undefined',
    'arrow functions': (() => true)(),
    'async/await': (async () => true)(),
    'CSS Grid': CSS.supports('display', 'grid'),
    'CSS Flexbox': CSS.supports('display', 'flex')
  };
  
  Object.entries(caracteristicas).forEach(([feature, supported]) => {
    const status = supported ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${feature}: ${supported ? 'Soportado' : 'No soportado'}`);
  });
}

// Limpiar datos del sistema
function limpiarDatos() {
  console.log('\nüóëÔ∏è LIMPIEZA DE DATOS');
  console.log('-------------------');
  
  try {
    // Limpiar localStorage
    const keys = Object.keys(localStorage);
    const bomberosKeys = keys.filter(key => key.includes('bomberos'));
    
    bomberosKeys.forEach(key => {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è Eliminado: ${key}`);
    });
    
    console.log('‚úÖ Datos del sistema limpiados');
  } catch (error) {
    console.log('‚ùå Error al limpiar datos:', error.message);
  }
}

// Test de login simulado
function testLogin() {
  console.log('\nüß™ TEST DE LOGIN SIMULADO');
  console.log('-------------------------');
  
  const testUser = {
    id: '1',
    nombre: 'Test',
    apellidos: 'Usuario',
    email: 'admin@bomberos.cl',
    rut: '11111111-1',
    rol: 'Administrador',
    isAuthenticated: true
  };
  
  try {
    localStorage.setItem('bomberos_user_session', JSON.stringify(testUser));
    const stored = JSON.parse(localStorage.getItem('bomberos_user_session'));
    
    if (stored && stored.email === testUser.email) {
      console.log('‚úÖ Test de sesi√≥n: Exitoso');
      console.log(`üë§ Usuario de prueba: ${stored.nombre} ${stored.apellidos} (${stored.rol})`);
      
      // Limpiar test
      localStorage.removeItem('bomberos_user_session');
    } else {
      console.log('‚ùå Test de sesi√≥n: Fallo en almacenamiento');
    }
  } catch (error) {
    console.log('‚ùå Test de sesi√≥n: Error -', error.message);
  }
}

// Funci√≥n principal de verificaci√≥n
function verificarSistemaCompleto() {
  console.clear();
  console.log('üöí INICIANDO VERIFICACI√ìN COMPLETA DEL SISTEMA');
  console.log('==============================================');
  
  const checks = [
    verificarLocalStorage,
    verificarAutenticacion,
    verificarNavegacion,
    verificarPermisos,
    verificarModulos,
    verificarCompatibilidad,
    testLogin
  ];
  
  let exitosos = 0;
  
  checks.forEach((check, index) => {
    try {
      const resultado = check();
      if (resultado !== false) exitosos++;
    } catch (error) {
      console.log(`‚ùå Error en verificaci√≥n ${index + 1}:`, error.message);
    }
  });
  
  console.log('\nüìä RESUMEN FINAL');
  console.log('===============');
  console.log(`‚úÖ Verificaciones exitosas: ${exitosos}/${checks.length}`);
  console.log(`üìà Porcentaje de √©xito: ${Math.round((exitosos / checks.length) * 100)}%`);
  
  if (exitosos === checks.length) {
    console.log('üéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!');
  } else if (exitosos >= checks.length * 0.8) {
    console.log('‚ö†Ô∏è Sistema mayormente funcional con advertencias menores');
  } else {
    console.log('‚ùå Sistema con problemas. Revisar errores arriba.');
  }
  
  console.log('\nüîß COMANDOS √öTILES:');
  console.log('- verificarSistemaCompleto(): Ejecutar verificaci√≥n completa');
  console.log('- limpiarDatos(): Limpiar datos del sistema');
  console.log('- testLogin(): Probar sistema de login');
  console.log('- verificarCompatibilidad(): Verificar navegador');
}

// Ejecutar verificaci√≥n autom√°ticamente
verificarSistemaCompleto();

// Hacer funciones disponibles globalmente
window.verificarSistemaCompleto = verificarSistemaCompleto;
window.limpiarDatos = limpiarDatos;
window.testLogin = testLogin;
window.verificarCompatibilidad = verificarCompatibilidad;